"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiltersStylesGenerator = exports.FiltersHookGenerator = exports.FiltersViewGenerator = void 0;
var utils_1 = require("../utils");
var FiltersViewGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {isEqual} from \"lodash\";\nimport {FC, FormEvent, MouseEvent} from \"react\";\nimport {DateRangePicker} from \"@material-ui/lab\";\nimport {Search as SearchIcon, Add as AddIcon} from '@material-ui/icons';\nimport {Box, Button, CircularProgress, Divider, MenuItem, Stack} from \"@material-ui/core\"\nimport {Autocomplete, FormControl, IconButton, InputLabel, Select, TextField} from \"@material-ui/core\";\nimport AdapterMoment from \"@material-ui/lab/AdapterMoment\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport use" + nameSingular + "Filters from \"./" + nameSingular + "Filters.hook\";\nimport use" + nameSingular + "Styles from \"./" + nameSingular + "Filters.styles\";\nimport {" + nameSingular + "ActionsCode, " + nameSingular + "Action} from \"../" + nameSingular + "Actions/" + nameSingular + "Actions.hook\";\n\ninterface " + nameSingular + "FilterProps {\n  onChange: (filters: {}) => void;\n  onClickCreate: (action: " + nameSingular + "Action) => void;\n}\n\nconst " + nameSingular + "Filters: FC<" + nameSingular + "FilterProps> = ({onChange, onClickCreate}) => {\n  const {\n    filters,\n    options,\n    autocompleteValue,\n    autocompleteLoading,\n    handleAgeChange,\n    handleDateRangeChange,\n    handleAutocompleteChange,\n    handleAutocompleteInputChange\n  } = use" + nameSingular + "Filters();\n  const classes = use" + nameSingular + "Styles();\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    onChange(filters);\n  };\n\n  const handleCreateClick = (e: MouseEvent<HTMLAnchorElement> | MouseEvent<HTMLButtonElement>) => {\n    onClickCreate({text: '\u0421\u043E\u0437\u0434\u0430\u0442\u044C', icon: AddIcon, code: " + nameSingular + "ActionsCode.Create});\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n        <Autocomplete\n          autoComplete\n          includeInputInList\n          filterSelectedOptions\n          sx={{width: 300}}\n          options={options}\n          value={autocompleteValue}\n          filterOptions={(x) => x}\n          getOptionLabel={option => option.label}\n          isOptionEqualToValue={(option, value) => isEqual(option, value)}\n          onChange={handleAutocompleteChange}\n          onInputChange={handleAutocompleteInputChange}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              InputProps={{\n                ...params.InputProps,\n                name: 'name',\n                endAdornment: (\n                  <>\n                    {autocompleteLoading ? <CircularProgress color=\"inherit\" size={20}/> : null}\n                    {params.InputProps.endAdornment}\n                  </>\n                ),\n              }}\n              label=\"Name\"\n              fullWidth\n            />\n          )}\n        />\n\n        <LocalizationProvider dateAdapter={AdapterMoment}>\n          <DateRangePicker\n            startText=\"\u0414\u0430\u0442\u0430 \u043D\u0430\u0447\u0430\u043B\u0430\"\n            endText=\"\u0414\u0430\u0442\u0430 \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u044F\"\n            value={filters.range || [null, null]}\n            onChange={handleDateRangeChange}\n            renderInput={(startProps, endProps) => (\n              <>\n                <TextField {...startProps} helperText={undefined}/>\n                <Box sx={{mx: 2}}/>\n                <TextField {...endProps} helperText={undefined}/>\n              </>\n            )}\n          />\n        </LocalizationProvider>\n\n        <FormControl sx={{m: 1, minWidth: 80}}>\n          <InputLabel>Age</InputLabel>\n          <Select\n            autoWidth\n            name=\"age\"\n            label=\"Age\"\n            size=\"medium\"\n            onChange={handleAgeChange}\n            value={filters?.age?.toString() || ''}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n\n        {/* Add your filer controls here...*/}\n\n        <IconButton\n          className={classes.submitBtn}\n          color=\"primary\"\n          type=\"submit\"\n        >\n          <SearchIcon/>\n        </IconButton>\n\n        <Divider orientation=\"vertical\"/>\n\n        <Button\n          onClick={handleCreateClick}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          \u0421\u043E\u0437\u0434\u0430\u0442\u044C\n        </Button>\n      </Stack>\n    </form>\n  );\n};\n\nexport default " + nameSingular + "Filters;\n  ");
};
exports.FiltersViewGenerator = FiltersViewGenerator;
var FiltersHookGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {ChangeEvent, SyntheticEvent, useState} from \"react\";\nimport {DateRange} from \"@material-ui/lab\";\nimport {Moment} from \"moment\";\n\n/* add your filter object keys & types. */\ninterface Filters {\n  name?: string;\n  range?: DateRange<Moment>;\n  age?: number;\n}\n\n/* Replace interface name & keys with your response type. */\ninterface Movie {\n  label: string;\n  year: number;\n}\n\nconst use" + nameSingular + "Filters = () => {\n  const [filters, setFilters] = useState<Filters>({} as Filters);\n  const [options, setOptions] = useState<Array<Movie>>([]);\n  const [autocompleteValue, setAutocompleteValue] = useState<Movie|null>(null);\n  const [autocompleteLoading, setAutocompleteLoading] = useState<boolean>(false);\n\n  const handleFiltersChange = (filter: {}) => setFilters(oldFilters => ({...oldFilters, ...filter}));\n\n  const handleDateRangeChange = (range: DateRange<Moment>) => handleFiltersChange({range});\n\n  const handleAutocompleteChange = (_: any, value: object|null) => setAutocompleteValue(value as Movie);\n\n  const handleAutocompleteInputChange = (_: SyntheticEvent, value: string) => {\n    setAutocompleteLoading(true);\n\n    // Replace with api request\n    Promise.resolve(options)\n      .then(options => options.filter(option => (new RegExp(value, 'gi')).test(option.label)))\n      .then(options => options.map(option => ({...option})))\n      .then(options => setTimeout(() => setOptions(options), 1000))\n      .then(() => handleFiltersChange({name: value}))\n      .then(() => setAutocompleteLoading(false));\n  };\n\n  const handleAgeChange = (e: ChangeEvent<{ name?: string; value: string; event: Event | SyntheticEvent }>) => {\n    const {name, value} = e.target;\n\n    handleFiltersChange({[name!]: +value});\n  };\n\n  return {\n    filters,\n    options,\n    autocompleteValue,\n    autocompleteLoading,\n    handleAgeChange,\n    handleFiltersChange,\n    handleDateRangeChange,\n    handleAutocompleteChange,\n    handleAutocompleteInputChange\n  };\n}\n\nexport default use" + nameSingular + "Filters;\n  ");
};
exports.FiltersHookGenerator = FiltersHookGenerator;
var FiltersStylesGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {makeStyles} from \"@material-ui/styles\";\nimport {Theme} from \"@material-ui/core/styles\";\n\nconst use" + nameSingular + "Styles = makeStyles((theme: Theme) => ({\n  root: {\n\n  }\n}));\n\nexport default use" + nameSingular + "Styles;\n  ");
};
exports.FiltersStylesGenerator = FiltersStylesGenerator;
//# sourceMappingURL=EntityFilters.js.map