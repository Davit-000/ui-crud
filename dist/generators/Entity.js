"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StylesGenerator = exports.HookGenerator = exports.ViewGenerator = void 0;
var utils_1 = require("../utils");
var ViewGenerator = function (name) {
    var _a = utils_1.wordParser(name), nameSingular = _a[0], namePlural = _a[1];
    return ("\nimport {FC} from \"react\";\nimport {Container} from \"@material-ui/core\";\nimport {DataGrid, GridValueGetterParams} from \"@material-ui/data-grid\";\nimport use" + namePlural + ", {FilterProps} from \"./" + namePlural + ".hook\";\nimport use" + namePlural + "Styles from \"./" + namePlural + ".styles\";\nimport " + nameSingular + "Form from \"./" + nameSingular + "Form/" + nameSingular + "Form\";\nimport " + nameSingular + "Actions from \"./" + nameSingular + "Actions/" + nameSingular + "Actions\";\nimport " + nameSingular + "Filters from \"./" + nameSingular + "Filters/" + nameSingular + "Filters\";\nimport {" + nameSingular + "Action} from \"./" + nameSingular + "Actions/" + nameSingular + "Actions.hook\";\n\ninterface " + namePlural + "Props {\n  name?: string\n}\n\nconst " + namePlural + ": FC<" + namePlural + "Props> = ({name}) => {\n  const {\n    rows,\n    columns,\n    rowCount,\n    loading,\n    filters,\n    sortModel,\n    rowsPerPageOptions,\n    setFilters,\n    isCellEditable,\n    handlePageChange,\n    handlePageSizeChange,\n    handleSortModelChange\n  } = use" + namePlural + "({\n    actionCell: {\n      flex: 1,\n      align: \"right\",\n      type: \"string\",\n      field: \"action\",\n      sortable: false,\n      editable: false,\n      headerName: \"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\",\n      headerAlign: \"right\",\n      disableClickEventBubbling: true,\n      renderCell: (params: GridValueGetterParams) =>\n        <" + nameSingular + "Actions\n          onSelect={handleSelect}\n          params={params}\n        />,\n    }\n  });\n  const {pageSize} = filters;\n  const classes = use" + namePlural + "Styles();\n\n  const handleSelect = (action: " + nameSingular + "Action, params: GridValueGetterParams) => {\n    console.log(action, params);\n  };\n\n  return (\n    <Container className={classes.root}>\n      <" + nameSingular + "Form\n        title=\"\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043F\u043E\u0441\u0442\"\n        onSubmit={(values: any) => console.log(values)}\n      />\n\n      <DataGrid\n        pagination\n        autoHeight\n        checkboxSelection\n        hideFooterRowCount\n        rows={rows}\n        columns={columns}\n        loading={loading}\n        pageSize={pageSize}\n        rowCount={rowCount}\n        sortModel={sortModel}\n        sortingMode=\"server\"\n        paginationMode=\"server\"\n        onPageChange={handlePageChange}\n        isCellEditable={isCellEditable}\n        onPageSizeChange={handlePageSizeChange}\n        onSortModelChange={handleSortModelChange}\n        rowsPerPageOptions={rowsPerPageOptions}\n        componentsProps={{\n          toolbar: {\n            onChange: (filters: FilterProps & {}) => setFilters(filters),\n            onClickCreate: handleSelect\n          },\n        }}\n        components={{\n          Toolbar: " + nameSingular + "Filters,\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default " + namePlural + ";\n  ");
};
exports.ViewGenerator = ViewGenerator;
var HookGenerator = function (name) {
    var _a = utils_1.wordParser(name), _ = _a[0], namePlural = _a[1];
    return ("\nimport {useEffect, useState} from \"react\";\nimport {\n  GridColDef,\n  GridRowsProp,\n  GridSortModel,\n  GridCellParams,\n  GridSortModelParams,\n  GridPageChangeParams,\n} from \"@material-ui/data-grid\";\nimport api from \"../../app/api\";\n\nexport interface FilterProps {\n  page: number;\n  pageSize: number;\n}\n\nexport interface Use" + namePlural + "Props {\n  actionCell: GridColDef;\n}\n\nconst use" + namePlural + " = ({actionCell}: Use" + namePlural + "Props) => {\n  const url = process.env.REACT_APP_API_URL;\n  const rowsPerPageOptions = [5, 10, 20];\n  const [rows, setRows] = useState<GridRowsProp>([]);\n  const [columns, setColumns] = useState<Array<GridColDef>>([\n    {field: 'col1', headerName: 'Column 1', width: 150},\n    {field: 'col2', headerName: 'Column 2', width: 150},\n    {...actionCell}\n  ]);\n  const [rowCount, setRowCount] = useState<number>(0);\n  const [filters, setFilters] = useState<FilterProps & {}>({\n    page: 1,\n    pageSize: 5\n  });\n  const [loading, setLoading] = useState<boolean>(false);\n  const [sortModel, setSortModel] = useState<GridSortModel>([]);\n\n  const get" + namePlural + " = (filters: FilterProps) => api\n    .get<{ " + namePlural.toLowerCase() + ": GridRowsProp; totalCount: number }>(`${url!}/measurementLog/template`, {params: filters})\n    .then(() => ({\n      " + namePlural.toLowerCase() + ": [\n        {id: 1, col1: 'Hello', col2: 'World'},\n        {id: 2, col1: 'XGrid', col2: 'is Awesome'},\n        {id: 3, col1: 'Material-UI', col2: 'is Amazing'},\n        {id: 4, col1: 'Hello', col2: 'World'},\n        {id: 5, col1: 'XGrid', col2: 'is Awesome'},\n        {id: 6, col1: 'Material-UI', col2: 'is Amazing'},\n        {id: 7, col1: 'Hello', col2: 'World'},\n        {id: 8, col1: 'XGrid', col2: 'is Awesome'},\n        {id: 9, col1: 'Material-UI', col2: 'is Amazing'},\n        {id: 10, col1: 'Hello', col2: 'World'},\n        {id: 12, col1: 'XGrid', col2: 'is Awesome'},\n        {id: 13, col1: 'Material-UI', col2: 'is Amazing'},\n      ],\n      totalCount: 19\n    }));\n\n  const isCellEditable = (params: GridCellParams) => !!params.id;\n\n  const handlePageChange = ({page}: GridPageChangeParams) => setFilters((filters) => ({...filters, page}));\n\n  const handlePageSizeChange = ({pageSize}: GridPageChangeParams) => setFilters(filters => ({...filters, pageSize}));\n\n  const handleSortModelChange = ({sortModel}: GridSortModelParams) => setSortModel(sortModel);\n\n  useEffect(() => {\n    setLoading(true);\n\n    get" + namePlural + "(filters)\n      .then(({rows, totalCount}) => {\n        setRows(rows)\n        setRowCount(totalCount);\n        setLoading(false);\n      });\n  }, [filters]);\n\n  return {\n    rows,\n    columns,\n    rowCount,\n    filters,\n    loading,\n    sortModel,\n    rowsPerPageOptions,\n    get" + namePlural + ",\n    setFilters,\n    isCellEditable,\n    handlePageChange,\n    handlePageSizeChange,\n    handleSortModelChange\n  };\n};\n\nexport default use" + namePlural + ";\n  ");
};
exports.HookGenerator = HookGenerator;
var StylesGenerator = function (name) {
    var _a = utils_1.wordParser(name), _ = _a[0], namePlural = _a[1];
    return ("\nimport {Theme} from \"@material-ui/core\";\nimport {makeStyles} from '@material-ui/styles';\n\nconst use" + namePlural + "Styles = makeStyles((theme: Theme) => ({\n  root: {\n\n  }\n}));\n\nexport default use" + namePlural + "Styles;\n  ");
};
exports.StylesGenerator = StylesGenerator;
//# sourceMappingURL=Entity.js.map