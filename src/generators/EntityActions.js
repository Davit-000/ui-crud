"use strict";
exports.__esModule = true;
exports.ActionStylesGenerator = exports.ActionHookGenerator = exports.ActionViewGenerator = void 0;
var utils_1 = require("../utils");
var ActionViewGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {createElement, FC} from \"react\";\nimport {GridValueGetterParams} from \"@material-ui/data-grid\";\nimport {Fade, Link, ListItemIcon, ListItemText, Menu, MenuItem} from \"@material-ui/core\";\nimport use" + nameSingular + "Actions, {" + nameSingular + "Action} from \"./" + nameSingular + "Actions.hook\";\n\nexport interface " + nameSingular + "ActionsProps {\n  params: GridValueGetterParams;\n  onSelect: (action: " + nameSingular + "Action, params: GridValueGetterParams) => void;\n}\n\nconst " + nameSingular + "Actions: FC<" + nameSingular + "ActionsProps> = ({params, onSelect}) => {\n  const {actions, anchorEl, handleClose, handleOpen, handleSelect} = use" + nameSingular + "Actions();\n\n  return (\n    <>\n      <Link\n        component=\"button\"\n        variant=\"body2\"\n        onClick={handleOpen}\n      >\n        \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n      </Link>\n\n      <Menu\n        open={!!anchorEl}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        TransitionComponent={Fade}\n      >\n        {actions.map(({text, icon, code}, index) => (\n          <MenuItem onClick={_ => handleSelect({text, icon, code}, params, onSelect)} key={index}>\n            <ListItemIcon>\n              {createElement(icon, {fontSize: \"small\"})}\n            </ListItemIcon>\n            <ListItemText primary={text}/>\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default " + nameSingular + "Actions;\n  ");
};
exports.ActionViewGenerator = ActionViewGenerator;
var ActionHookGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {useState, MouseEvent} from \"react\";\nimport {SvgIconTypeMap} from \"@material-ui/core\";\nimport {Edit, Delete, Visibility} from \"@material-ui/icons\";\nimport {GridValueGetterParams} from \"@material-ui/data-grid\";\nimport {OverridableComponent} from \"@material-ui/core/OverridableComponent\";\n\ntype ActionMenuIcon = OverridableComponent<SvgIconTypeMap> & {muiName: string};\n\nexport enum " + nameSingular + "ActionsCode {\n  Delete,\n  Create,\n  Edit,\n  Show\n}\n\nexport interface " + nameSingular + "Action {\n  text: string;\n  icon: ActionMenuIcon;\n  code: " + nameSingular + "ActionsCode;\n}\n\nconst use" + nameSingular + "Actions = () => {\n  const actions: Array<" + nameSingular + "Action> = [\n    {text: '\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C', icon: Visibility, code: " + nameSingular + "ActionsCode.Show},\n    {text: '\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C', icon: Edit, code: " + nameSingular + "ActionsCode.Edit},\n    {text: '\u0423\u0434\u0430\u043B\u0438\u0442\u044C', icon: Delete, code: " + nameSingular + "ActionsCode.Delete},\n  ];\n  const [anchorEl, setAnchorEl] = useState<HTMLAnchorElement | HTMLSpanElement | null>(null);\n\n  const handleOpen = (e: MouseEvent<HTMLAnchorElement> | MouseEvent<HTMLSpanElement>) => {\n    if (anchorEl === e.currentTarget) {\n      return;\n    }\n\n    setAnchorEl(e.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSelect = (\n    action: " + nameSingular + "Action,\n    params: GridValueGetterParams,\n    onSelect: (action: " + nameSingular + "Action, params: GridValueGetterParams) => void\n  ) => {\n    handleClose();\n\n    onSelect(action, params);\n  };\n\n  return {\n    actions,\n    anchorEl,\n    handleOpen,\n    handleClose,\n    handleSelect\n  };\n};\n\nexport default use" + nameSingular + "Actions;\n  ");
};
exports.ActionHookGenerator = ActionHookGenerator;
var ActionStylesGenerator = function (name) {
    var nameSingular = utils_1.wordParser(name)[0];
    return ("\nimport {Theme} from \"@material-ui/core\";\nimport {makeStyles} from '@material-ui/styles';\n\nconst use" + nameSingular + "ActionStyles = makeStyles((theme: Theme) => ({\n  root: {\n\n  }\n}));\n\nexport default use" + nameSingular + "ActionStyles;\n  ");
};
exports.ActionStylesGenerator = ActionStylesGenerator;
